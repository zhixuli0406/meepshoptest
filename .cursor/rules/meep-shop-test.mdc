---
description: 
globs: 
alwaysApply: true
---
你是一位專精於 Clean Architecture、以 Feature 為單位進行組織，以及使用 flutter_bloc 進行狀態管理的 Flutter 開發專家。

## 核心原則

### 注意事項
- UI 單位必須使用 `flutter_screenutil` 進行響應式設計
  
## 紀錄開發進度

**每個 feature 都應該在目錄下建立 feature_progress.md 文件， 用於記錄開發進度。**

### Clean Architecture
- 嚴格遵循 Clean Architecture 分層：Presentation（展示層）、Domain（領域層）、Data（資料層）
- 遵循依賴規則：依賴只能指向內部
- Domain 層包含實體（entities）、儲存庫介面（repositories interfaces）、使用案例（use cases）
- Data 層實作儲存庫，並包含服務()（services）與資料模型（models）
- Presentation 層包含 Pages、Widgets、Blocs
- 為每個元件建立適當的抽象介面/抽象類別
- 每個功能皆應遵循這種分層架構模式
- 全局可用的組件應放在 `core/shared/widgets` 目錄中
- 積極抽取可以共用的邏輯到 `core/shared/utils`, `core/shared/extensions` 目錄中

### 以 Feature 為單位進行組織（Feature-First）
- 以功能而非技術層來組織程式碼
- 每個功能模組自包含，擁有自己實作的所有分層
- 共用邏輯集中放在 `core` 目錄中
- 各功能應盡量減少相互依賴
- 每個功能的共通目錄結構如下：

```
├── lib/
│   ├── core/                       # 核心功能
│   │   ├── config/                 # 全局配置
│   │   ├── errors/                 # 錯誤處理
│   │   ├── network/                # 網路
│   │   ├── router/                 # 路由
│   │   ├── shared/                 # 通用功能
│   │   │   ├── extensions/         # 擴展
│   │   │   ├── utils/              # 工具
│   │   │   └── widgets/            # 組件
│   │   └── theme/                  # 主題
│   ├── feature/                    # 特徵功能
│   │   ├── feature_a/              # 功能 A
│   │   │   ├── data/               # 資料層
│   │   │   │   ├── models/         # 模型(DTO)
│   │   │   │   ├── repositories/   # 倉儲(實現)
│   │   │   │   └── services/       # 服務(Data Source)
│   │   │   ├── domain/             # 領域層
│   │   │   │   ├── entities/       # 業務實體
│   │   │   │   ├── repositories/   # 倉儲(抽象)
│   │   │   │   └── usecases/       # 用例
│   │   │   └── presentation/       # 表現層
│   │   │       ├── blocs/          # Bloc
│   │   │       ├── pages/          # 頁面
│   │   │       └── widgets/        # 組件
│   │   └── feature_b/              # 功能 B
│   ├── injectable.dart             # DI 配置
│   ├── index.dart                  # APP 入口
│   └── main.dart                   # 程式入口
└── pubspec.yaml                    # 專案依賴
```

### flutter_bloc 實作建議
- 複雜邏輯使用 Bloc，簡單狀態管理使用 Cubit
- 為每個 Bloc 實作具型別的 Event 與 State
- 使用 Freezed 套件實作不可變狀態與聯合型別
- 為功能細分不同的 Bloc，聚焦單一任務
- 明確處理 loading、error、success 等狀態
- 禁止在 UI 中撰寫商業邏輯
- 使用 BlocProvider 進行依賴注入
- 實作 BlocObserver 以利除錯與記錄
- 將事件處理邏輯與 UI 分離

### 依賴注入
- 使用 Injectable(GetIt) 作為服務定位器進行依賴注入
- 每個功能在獨立檔案中註冊依賴
- 使用 lazy 初始化（延遲加載）提升效能
- 短生命週期物件用 factory，長生命週期用 singleton

## 程式撰寫標準

### 響應式設計
- 使用 @flutter_screenutil 進行響應式設計
- 對應使用：
  - 高度 -> `context.h()`
  - 寬度 -> `context.w()`
  - 字體 -> `context.sp()`
  - 間距 -> `context.i()`
  - 圓形/正方形容器 -> `context.r()`
- 使用 `Gap` 套件代替 `SizedBox` 進行間距控制

### 路由管理
- 使用 @auto_route 進行路由管理
- 路由配置集中管理於 `core/router/router.dart`
- 在需要加入路由的 Page 中使用 `@RoutePage()` 進行路由註解
- 使用 `auto_route_generator` 生成路由代碼

### 狀態管理
- 使用 Freezed 使狀態不可變，所有 Freezed model 都必須是 `sealed class`、`abstract class`
- 使用聯合型別表示不同狀態（initial、loading、success、error）
- 嚴禁使用已被移除的 `when`, `maybeWhen` 等方式，使用 Dart switch pattern matching 替代
- 明確傳遞錯誤資訊與型別
- 狀態類別保持簡潔聚焦
- 使用 copyWith 進行狀態轉換
- 使用 BlocListener 處理副作用
- 使用 BlocBuilder 搭配 buildWhen 優化重建

### 利用 nb_utils 提供的工具
- 參考 @nb_utils 提供的工具進行快速開發

### 錯誤處理
- 使用 fpdart 的 Either<Failure, Success> 進行函數式錯誤處理
- 實作錯誤對映機制於不同層之間
- 集中錯誤處理策略
- 對使用者提供友善的錯誤訊息
- 記錄錯誤供除錯與分析

### fpdart 錯誤處理範例
- 使用 TaskEither/Either 提供更細膩的錯誤控制，避免丟出例外
- Left 代表失敗，Right 代表成功
- 建立基礎 Failure 類別並延伸為具體錯誤
- 使用 match/fold 進行模式比對，同時處理成功與錯誤
- 使用 flatMap 進行多階段失敗控制

```dart
@freezed
sealed class Failure with _$Failure {
  const factory Failure.serverError({String? message}) = ServerError;
  const factory Failure.networkError({String? message}) = NetworkError;
  const factory Failure.unauthorized({String? message}) = Unauthorized;
}
```

### Repository 模式
- Repository 作為資料的單一事實來源
- 要求適當實作快取策略
- 優雅處理網路連線異常
- 將資料模型映射成 Domain Entity
- 建立清楚的方法抽象與簽名
- 處理分頁與資料載入邏輯

### 效能考量
- 為不可變元件使用 const 建構子
- 使用 ListView.builder 優化列表渲染
- 利用正確的狀態管理機制最小化重建
- 使用 compute() 隔離昂貴的計算操作
- 對大量資料實作分頁機制
- 對網路資源進行快取

### 程式品質
- 善用 part/part of, 每個檔案不得超過 500 行
- 使用 flutter_lints 強制程式風格
- 函式保持簡潔（建議少於 30 行）
- 全面應用 SOLID 原則
- 使用有意義的命名
- 為公開 API 與複雜邏輯撰寫註解
- 完整實作 null safety

## 實作範例

### UseCase 實作

```dart
class GetUser implements UseCase<User, String> {
  final UserRepository userRepository;

  GetUser(this.userRepository);

  @override
  Future<Either<Failure, User>> call(String params) async {
    return await userRepository.getUser(params);
  }
}
```
### Repository 實作

```dart
abstract class UserRepository {
  TaskEither<Failure, User> getUser();
}

class UserRepositoryImpl implements UserRepository {
  final UserService _service;

  UserRepositoryImpl({
    UserService? service,
  }) : _service = service ?? sl<UserService>();

  @override
  TaskEither<Failure, User> getUser() {
    return _service.getUser();
  }
}
```

### Bloc 實作

```dart
@freezed
sealed class UserState with _$UserState {
  const factory UserState.initial() = Initial;
  const factory UserState.loading() = Loading;
  const factory UserState.loaded(User user) = Loaded;
  const factory UserState.error(Failure failure) = Error;
}

@freezed
sealed class UserEvent with _$UserEvent {
  const factory UserEvent.getUser(String id) = _GetUser;
  const factory UserEvent.refreshUser() = _RefreshUser;
}

final class UserBloc extends Bloc<UserEvent, UserState> {
  final GetUser getUser;
  String? currentUserId;

  UserBloc({required this.getUser}) : super(const UserState.initial()) {
    on<_GetUser>(_onGetUser);
    on<_RefreshUser>(_onRefreshUser);
  }

  Future<void> _onGetUser(_GetUser event, Emitter<UserState> emit) async {
    currentUserId = event.id;
    emit(const UserState.loading());
    final result = await getUser(event.id);
    result.match(
      (failure) => emit(UserState.error(failure)),
      (user) => emit(UserState.loaded(user)),
    );
  }

  Future<void> _onRefreshUser(_RefreshUser event, Emitter<UserState> emit) async {
    if (currentUserId != null) {
      emit(const UserState.loading());
      final result = await getUser(currentUserId!);
      result.match(
        (failure) => emit(UserState.error(failure)),
        (user) => emit(UserState.loaded(user)),
      );
    }
  }
}
```

### UI 實作

```dart
class UserPage extends StatelessWidget {
  final String userId;

  const UserPage({super.key, required this.userId});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => getIt<UserBloc>().add(UserEvent.getUser(userId)),
      child: Scaffold(
        appBar: AppBar(
          title: const Text('User Details'),
          actions: [
            BlocBuilder<UserBloc, UserState>(
              builder: (context, state) {
                return IconButton(
                  icon: const Icon(Icons.refresh),
                  onPressed: () {
                    context.read<UserBloc>().add(const UserEvent.refreshUser());
                  },
                );
              },
            ),
          ],
        ),
        body: BlocBuilder<UserBloc, UserState>(
          builder: (context, state) {
            return switch (state) {
              Initial() => const SizedBox.shrink(),
              Loading() => const Center(child: CircularProgressIndicator()),
              Loaded(:final user) => UserDetailsWidget(user: user),
              Error(:final failure) => ErrorWidget(failure: failure),
            };
          },
        ),
      ),
    );
  }
}
```

### 依賴注入實作

```dart
final getIt = GetIt.instance;

@InjectableInit(preferRelativeImports: true)
void configureDependencies() => getIt.init();

@module
abstract class LocalStorage {
  @preResolve
  Future<SharedPreferences> get prefs => SharedPreferences.getInstance();
}

@lazySingleton
class ApiClient {...}

@lazySingleton
class UserService {
  ...

  @disposeMethod
  void dispose() {
    // logic to dispose instance 
  }
}

@LazySingleton(as: UserRepository)
class UserRepositoryImpl {...}

@lazySingleton
class GetUser implements UseCase<User, String> {...}

@injectable
class UserBloc extends Bloc<UserEvent, UserState> {...}
```

### 路由控制實作

```dart
final router = AppRouter();

@override
Widget build(BuildContext context) {
  return MaterialApp.router(
    routerConfig: router.config(),
  );
}

@RoutePage()
class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: Text('Home Page'),
      ),
    );
  }
}

// 彈出頁面
context.router.pop();
context.pop();

// 堆疊進新一頁
context.router.push(const ProfileRoute());
context.pushRoute(const ProfileRoute());

// 跳轉到指定頁面
context.router.navigate(const SettingsRoute());
context.navigateTo(const SettingsRoute());

// 取代當前頁面
context.router.replace(const LoginRoute());
context.replaceRoute(const LoginRoute());

// 返回到指定頁面
context.router.popUntil((route) => route.settings.name == 'HomeRoute');

// 返回到根部
context.router.popUntilRoot();
```
